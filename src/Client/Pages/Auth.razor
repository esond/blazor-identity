@page "/auth"
@using Microsoft.AspNetCore.Authorization

@inject IUsersApi UsersApi

@attribute [Authorize]

<PageTitle>Auth</PageTitle>

<AuthorizeView>
    <h1>Current User</h1>

    <p>This component demonstrates showing data about the current user.</p>

    <h2>Local user claims</h2>
    <table class="table">
        <thead>
        <tr>
            <th>Type</th>
            <th>Value</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var claim in context.User.Claims)
        {
            <tr>
                <td>@claim.Type</td>
                <td>@claim.Value</td>
            </tr>
        }
        </tbody>
    </table>

    <hr/>

    <h2>Fetched user claims</h2>

    @if (fetchedClaims is null)
    {
        <p>
            <em>Loading...</em>
        </p>
    }
    else
    {
        <table class="table">
            <thead>
            <tr>
                <th>Type</th>
                <th>Value</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var claim in fetchedClaims)
            {
                <tr>
                    <td>@claim.claimType</td>
                    <td>@claim.claimValue</td>
                </tr>
            }
            </tbody>
        </table>
    }
</AuthorizeView>

@code {
    private (string claimType, string claimValue)[]? fetchedClaims;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        // Simulate asynchronous loading to demonstrate a loading indicator
        await Task.Delay(500);

        var response = await UsersApi.GetMe();

        fetchedClaims = response.Content!;
    }

}
